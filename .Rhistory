source('~/.active-rstudio-document', echo=TRUE)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
names(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1 <- randomForest(y~., data=vowel.train)
library("caret")
library("rattle")
library("randomForest")
mod1 <- randomForest(y~., data=vowel.train)
summary(mod1)
mod1$finalModel
mod1Predict <- predict(mod1, vowel.test)
confusionMatrix(vowel.test$y, mod1Predict)
mod1b <- train(y~., data=vowel.train, method="rf")
mod2 <- train(y~., data=vowel.train, method="gbm")
mod1bPredict <- predict(mod1b, vowel.test)
confusionMatrix(vowel.test$y, mod1bPredict)
mod2Predict <- predict(mod2, vowel.test)
confusionMatrix(vowel.test$y, mod2Predict)
confusionMatrix(mod1bPredict, mod2Predict)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("AppliedPredictiveModeling")
source('~/.active-rstudio-document', echo=TRUE)
mod1 <- train(diagnosis~., method="rf", data=training)
mod2 <- train(diagnosis~., method="gbm", data=training)
mod3 <- train(diagnosis~., method="lda", data=training)
train.predict <- predict(mod1, testing)
head(train.predict)
train.predict$gbm <- predict(mod2, testing)
train.predict$lda <- predict(mod3, testing)
head(train.predict)
train.predict <- data.frame()
x <- predict(mod1, testing)
str(x)
summary(x)
train.predict$rf <- predict(mod1, testing)
train.predict$gbm <- predict(mod2, testing)
train.predict$lda <- predict(mod3, testing)
train.predict <- NULL
train.predict$rf <- predict(mod1, testing)
train.predict$gbm <- predict(mod2, testing)
train.predict$lda <- predict(mod3, testing)
head(train.predict)
str(train.predict)
dim(train.predict)
train.predict <- NULL
train.predict$rf <- unlist(predict(mod1, testing))
train.predict$gbm <- unlist(predict(mod2, testing))
train.predict$lda <- unlist(predict(mod3, testing))
head(train.predict)
unlist(predict(mod1, testing))
unlist(predict(mod2, testing))
train.predict <- rbind(unlist(predict(mod1, testing)), unlist(predict(mod2, testing)), unlist(predict(mod3, testing)))
head(train.predict)
train.predict <- cbind(unlist(predict(mod1, testing)), unlist(predict(mod2, testing)), unlist(predict(mod3, testing)))
head(train.predict)
train.predict <- data.frame(cbind(unlist(predict(mod1, testing)), unlist(predict(mod2, testing)), unlist(predict(mod3, testing))))
head(train.predict)
colnames(train.predict) <- c("rf", "gbm", "lda")
head(train.predict)
summary(train.predict)
table(train.predict)
train.predict <- data.frame(cbind(unlist(predict(mod1, testing)), unlist(predict(mod2, testing)), unlist(predict(mod3, testing)), testing$diagnosis))
colnames(train.predict) <- c("rf", "gbm", "lda", "diagnosis")
head(train.predict, 10)
mod4 <- train(diagnosis~., method="rf", data=train.predict)
mod1predict <- predict(mod1, testing)
mod2predict <- predict(mod2, testing)
mod3predict <- predict(mod3, testing)
train.predict <- data.frame(cbind(unlist(mod1predict), unlist(mod2predict), unlist(mod3predict), testing$diagnosis))
mod4 <- train(diagnosis~., method="rf", data=train.predict)
mod1 <- train(diagnosis~., method="rf", data=training)
mod1predict <- predict(mod1, testing)
mod2predict <- predict(mod2, testing)
mod3predict <- predict(mod3, testing)
train.predict <- data.frame(cbind(unlist(mod1predict), unlist(mod2predict), unlist(mod3predict), testing$diagnosis))
colnames(train.predict) <- c("rf", "gbm", "lda", "diagnosis")
mod4 <- train(diagnosis~., method="rf", data=train.predict)
mod4predict <- predict(mod4, testing)
mod4 <- train(diagnosis~., method="rf", data=train.predict)
warnings()
mod4 <- train(as.factor(diagnosis)~., method="rf", data=train.predict)
mod4predict <- predict(mod4, testing)
mod4$finalModel
mod1predict
confusionMatrix(mod1predict, testing)
confusionMatrix(testing$diangnosis, mod1predict)
confusionMatrix(testing$y, mod2Predict)
confusionMatrix(testing$y, mod1Predict)
install.packages("shiny")
library(shiny)
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
runApp()
setwd("/Users/kaylinwalker/R/Data Product/")
runApp()
data(sleep)
head(sleep)
names(sleep)
?slepe
?sleep
data(UCBAdmissions)
names(UCBAdmissions)
head(UCBAdmissions)
?UCBAdmissions
UCBAdmissions
data(WWWusage)
head(WWWusage)
?WWWusage
WWWusage
data(airquality)
head(airquality)
library(ggplot2)
pairs(airquality)
fit <- lm(Ozone ~ ., airquality)
summary(fit)
fit <- lm(Ozone ~ Solar.R + Wind + Temp + Month, airquality)
summary(fit)
fit <- lm(Ozone ~ Solar.R + Wind + Temp, airquality)
summary(fit)
fit <- lm(Ozone ~ . -1, airquality)
summary(fit)
fit <- lm(Ozone ~ Solar.R + Wind + Temp -1, airquality)
summary(fit)
data(airmiles)
head(airmiles)
?airmiles
airmailes
airmiles
data(BJSsales)
data(BJales)
data(BJsales)
head(BJsales)
?BJsales
data(euro)
head(euro)
euro
data(LakeHuron)
head(LakeHuron)
?LakeHuron
data(women)
head(women)
ggplot(women, aes(height, weight)) + geom_point()
data(Titanic)
head(Titanic)
?Titanic
names(Titanic)
Titanic
data(ability.cov)
head(ability.cov)
?ability.cov
data(crimta)
data(crimtab)
head(crimtab)
?crimtab
data(mtcars)
head(mtcars)
summary(mtcars)
hist(mtcars$cyl)
pairs(mtcars)
plot(mtcars$cyl, mtcars$cyl, type="p")
?mtcars
hist(mtcars$hp)
hist(mtcars$wt)
setwd("/Users/kaylinwalker/R/Data Product/")
runApp()
runApp()
runApp()
runApp()
admission <- read.csv("sample_admission_data.csv", stringsAsFactors=FALSE)
admission
str(admission)
pairs(admission)
fit <- lm(Admission.Decision ~ ., admission)
summary(fit)
fit <- lm(Admission.Decision ~ . -1, admission)
summary(fit)
ggplot(admission, aes(ACT, GPA)) + geom_point(aes(color=Class.Rank))
ggplot(admission, aes(ACT, GPA)) + geom_point(aes(color=Admission.Decision))
ggplot(admission, aes(ACT, GPA)) + geom_point(aes(color=Admission.Decision, size=3))
ggplot(admission, aes(ACT, GPA)) + geom_point(aes(color=Admission.Decision, size=5))
ggplot(admission, aes(ACT, GPA)) + geom_point(aes(color=Admission.Decision, size=10))
ggplot(admission, aes(ACT, GPA)) + geom_point(aes(color=Admission.Decision, size=10)) + stat_smooth(method="lm")
ggplot(admission, aes(ACT, Admission.Decision)) + geom_point(aes(color=GPA, size=10)) + stat_smooth(method="lm")
fit <- lm(Admission.Decision ~ . -1, admission)
predict(fit)
head(admission)
sample <- data.frame(ACT=c(22, 34, 29), GPA=c(3.0, 3.54, 3.98), Class.Rank=c(0.3345, 0.2334, 0.001))
head(sample)
predict(fit, sample)
sample <- data.frame(ACT=c(22), GPA=c(3.0), Class.Rank=c(0.3345))
sample
predict(fit, sample)
x<- predict(fit, sample)
x
str(x)
?predict
x[1]
x[[1]
]
admission <- read.csv("sample_admission_data.csv", stringsAsFactors=FALSE)
fit <- lm(Admission.Decision ~ . -1, admission)
sample <- data.frame(ACT=c(22, 34, 29), GPA=c(3.0, 3.54, 3.98), Class.Rank=c(0.3345, 0.2334, 0.001))
sample <- data.frame(ACT=c(22), GPA=c(3.0), Class.Rank=c(0.3345))
prediction <- predict(fit, sample)
print(prediction[[1]])
predict.decision <- function(act, gpa, rank) {
setwd("/Users/kaylinwalker/R/Data Product")
admission <- read.csv("sample_admission_data.csv", stringsAsFactors=FALSE)
fit <- lm(Admission.Decision ~ . -1, admission)
sample <- data.frame(ACT=c(act), GPA=c(gpa), Class.Rank=c(rank))
prediction <- predict(fit, sample)
print(prediction[[1]])
}
predict.decision(15, 3.48, 0.55)
predict.decision(35, 3.8, 0.22)
runApp()
runApp()
predict.decision <- function(act, gpa, rank) {
setwd("/Users/kaylinwalker/R/Data Product")
admission <- read.csv("sample_admission_data.csv", stringsAsFactors=FALSE)
fit <- lm(Admission.Decision ~ . -1, admission)
sample <- data.frame(ACT=c(act), GPA=c(gpa), Class.Rank=c(rank))
prediction <- predict(fit, sample)
x <- print(prediction[[1]])
}
predict.decision(input$act, input$gpa, rank)
runApp()
runApp()
admission <- read.csv("data/sample_admission_data.csv", stringsAsFactors=FALSE)
str(admission)
